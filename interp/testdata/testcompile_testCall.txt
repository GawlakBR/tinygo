fn ccc ({0: ptr(in default, idx i32), 4: i32, 8: i32} {0: ptr(in default, idx i32) %0, 4: i32 %1, 8: i32 %2})->(i32 %0) in default {
entry: (height: 3)
	switch i32 %1 {i32 0: [to ret, φ(i32 0)], i32 1: [to 0, φ()]}
1: (height: 3)
	i32 %3 = i32 sub i32 %1, i32 cast(i31 bitslice(i32 %1)[1:32])
	i32 %4 = call fn ccc ({0: ptr(in default, idx i32), 4: i32, 8: i32} {0: ptr(in default, idx i32) %0, 4: i32 %1, 8: i32 %2})->(i32 %0) in default, ptr(in default, idx i32) @testCall, ptr(in default, idx i32) %0, i32 %3, i32 %2
	{0: ptr(in default, idx i32), 4: i32, 8: i32} {0: ptr(in default, idx i32) %5, 4: i32 %6, 8: i32 %7} = call fn ccc ({0: ptr(in default, idx i32), 4: i32, 8: i32} {0: ptr(in default, idx i32) %0, 4: i32 %1, 8: i32 %2}, i32 %3)->({0: ptr(in default, idx i32), 4: i32, 8: i32} {0: ptr(in default, idx i32) %0, 4: i32 %1, 8: i32 %2}) in default, ptr(in default, idx i32) @testPtrMath, ptr(in default, idx i32) %0, i32 %1, i32 %2, i32 cast(i31 bitslice(i32 %1)[1:32])
	i32 %8 = call fn ccc ({0: ptr(in default, idx i32), 4: i32, 8: i32} {0: ptr(in default, idx i32) %0, 4: i32 %1, 8: i32 %2})->(i32 %0) in default, ptr(in default, idx i32) @testCall, ptr(in default, idx i32) %5, i32 %6, i32 %7
	i32 %9 = i32 add i32 %4, i32 %8
	br [to ret, φ(i32 %9)]
0: (height: 3)
	i32 %3 = i32 nosync load ptr(in default, idx i32) %0 align 4
	br [to ret, φ(i32 %3)]
ret: (height: 1)
}