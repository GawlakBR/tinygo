This is a port of Go's "net" package version 1.19.3.

It offers a subset of Go's "net" package and is modified to use the netdev
driver interface.  For TLS support, Go's "crypto/tls" package is modified
to use the netdev interface to offload mbed TLS to the device.

The tree listings below shows the files copied from Go 1.19.3.  If the file
is marked with an "*", it is copied _and_ modified to work with netdev.  If
there is no "*", it is a straight copy.

src/net
├── dial.go			*
├── http
│   ├── client.go		*
│   ├── clone.go
│   ├── cookie.go
│   ├── fs.go
│   ├── header.go		*
│   ├── http.go
│   ├── internal
│   │   ├── ascii
│   │   │   └── print.go
│   │   └── chunked.go
│   ├── jar.go
│   ├── method.go
│   ├── request.go		*
│   ├── response.go		*
│   ├── server.go		*
│   ├── sniff.go
│   ├── status.go
│   ├── transfer.go		*
│   └── transport.go		*
├── ip.go
├── iprawsock.go		*
├── ipsock.go			*
├── mac.go
├── net.go			*
├── parse.go
├── tcpsock.go			*
├── tlssock.go			*
└── udpsock.go			*

src/crypto/tls/
├── common.go			*
└── tls.go			*

The modifications to "net" are to basically wrap TCPConn, UDPConn, and TLSConn
around netdev socket calls.  In Go, these Conns call out to OS syscalls for the
socket operations.  In TinyGo, the OS syscalls aren't available, so netdev
socket calls are substituted to support TCP/UDP/TLS connections.

The modifications to "net/http" are on the client and server side.  On the
client side, the TinyGo code changes remove the back-end round-tripper code and
replaces it with direct calls to TCPConns/TLSConns.  All of Go's http
request/response handling code is intact and operational in TinyGo.  Same holds
true for the server side.  The server side supports the normal server features
like ServeMux and Hijacker (for websockets).

There are no new exported names added to the "net" or "net/http" packages.
