// +build rpi3_qemu

//
//
// DO NOT EDIT THIS FILE!  YOUR CHANGES WILL BE OVERWRITTEN!
//
// This file was machine generated from the system description file
// 'sys/rpi3_qemu.go'.  You can obtain the latest version of sysdec
// and the system description files at
// github.com/iansmith/feelings/src/tools/sysdec
//
package machine

import "runtime/volatile"
import "unsafe"

///////////////////////////////////////////////////////////////////////
//                             PERIPHERALS
///////////////////////////////////////////////////////////////////////
//Auxiliary Peripherals: The SOC has three Auxiliary
//peripherals: One mini UART and two SPI masters. These three peripheral are
//grouped together as they share the same area in the peripheral register map
//and they share a common interrupt. Also all three are controlled by the
//auxiliary enable register.
//
//There are two Auxiliary registers which control all three devices. One is the
//interrupt status register, the second is the Auxiliary enable register. The
//Auxiliary IRQ status register can help to hierarchically determine the source
//of an interrupt.
//
//The mini UART is a secondary low throughput4 UART intended to be used as a
//console. It needs to be enabled before it can be used. It is also recommended
//that the correct GPIO function mode is selected before enabling the mini UART.
//The mini Uart has the following features:
//• 7 or 8 bit operation.
//• 1 start and 1 stop bit.
//• No parities.
//• Break generation.
//• 8 symbols deep FIFOs for receive and transmit.
//• SW controlled RTS, SW readable CTS.
//• Auto flow control with programmable FIFO level.
//• 16550 like registers.
//• Baudrate derived from system clock.
//This is a mini UART and it does NOT have the following capabilities:
//• Break detection
//• Framing errors detection.
//• Parity bit
//• Receive Time-out interrupt
//• DCD, DSR, DTR or RI signals.
//The implemented UART is not a 16650 compatible UART However as far as possible
//the first 8 control and status registers are laid out like a 16550 UART. All
//16550 register bits which are not supported can be written but will be
//ignored and read back as 0. All control bits for simple UART receive/transmit
//operations are available.
//
//Currently, the two SPI masters are not described in this document.
var Aux *AuxDef = (*AuxDef)(unsafe.Pointer(uintptr(0x3f000000 + 0x215000)))

type AuxDef struct {
	IRQ         IRQDef              // 0x0
	Enable      EnableDef           // 0x4
	reserved000 volatile.Register32 // 0x8
	reserved001 volatile.Register32 // 0xc
	reserved002 volatile.Register32 // 0x10
	reserved003 volatile.Register32 // 0x14
	reserved004 volatile.Register32 // 0x18
	reserved005 volatile.Register32 // 0x1c
	reserved006 volatile.Register32 // 0x20
	reserved007 volatile.Register32 // 0x24
	reserved008 volatile.Register32 // 0x28
	reserved009 volatile.Register32 // 0x2c
	reserved010 volatile.Register32 // 0x30
	reserved011 volatile.Register32 // 0x34
	reserved012 volatile.Register32 // 0x38
	reserved013 volatile.Register32 // 0x3c
	MUData      MUDataDef           // 0x40
	MUIER       MUIERDef            // 0x44
	MUIIR       MUIIRDef            // 0x48
	MULCR       MULCRDef            // 0x4c
	MUMCR       MUMCRDef            // 0x50
	MULSR       MULSRDef            // 0x54
	MUMSR       MUMSRDef            // 0x58
	reserved014 volatile.Register32 // 0x5c
	MUCNTL      MUCNTLDef           // 0x60
	MUStat      MUStatDef           // 0x64
	MUBaud      MUBaudDef           // 0x68
}

///////////////////////////////////////////////////////////////////////
//
//This peripheral really is running the show. It's running its own OS and bosses
//the ARM around.
//
//https://github.com/raspberrypi/firmware/wiki/Mailbox-property-interface
//
var GPUMailbox *GPUMailboxDef = (*GPUMailboxDef)(unsafe.Pointer(uintptr(0x40000000 + 0xb880)))

type GPUMailboxDef struct {
	Receive     ReceiveDef          // 0x0
	reserved000 volatile.Register32 // 0x4
	reserved001 volatile.Register32 // 0x8
	reserved002 volatile.Register32 // 0xc
	Poll        PollDef             // 0x10
	Sender      SenderDef           // 0x14
	Status      StatusDef           // 0x18
	Config      ConfigDef           // 0x1c
	Write       WriteDef            // 0x20
}

///////////////////////////////////////////////////////////////////////
//Interrupt Controller: Broadcom implementation of the ARM GIC.
//
//The ARM has two types of interrupt sources:
//1. Interrupts coming from the GPU peripherals.
//2. Interrupts coming from local ARM control peripherals.
//
//ProTip: To route anything from this interrupt controller to a core, you
//need to tell that core that its local routing, either IRQ or FIQ,
//should be from the GPU.
//
//The ARM processor gets three types of interrupts:
//1. Interrupts from ARM specific peripherals.
//2. Interrupts from GPU peripherals.
//3. Special events interrupts.
//
//ProTip: Most of the interesting peripherals are attached to this
//InterruptController.  The primary reason to use ARM specific peripherals
//is access to additional timers (including in QEMU) and to communicate
//between cores.
var IC *ICDef = (*ICDef)(unsafe.Pointer(uintptr(0x3f000000 + 0xb200)))

type ICDef struct {
	BasicPending BasicPendingDef     // 0x0
	Pending1     Pending1Def         // 0x4
	Pending2     Pending2Def         // 0x8
	ICFIQSource  ICFIQSourceDef      // 0xc
	Enable1      Enable1Def          // 0x10
	Enable2      Enable2Def          // 0x14
	EnableBasic  EnableBasicDef      // 0x18
	Disable1     Disable1Def         // 0x1c
	Disable2     Disable2Def         // 0x20
	DisableBasic DisableBasicDef     // 0x24
	reserved000  volatile.Register32 // 0x28
}

///////////////////////////////////////////////////////////////////////
//
//This is a crucial "peripheral" that defines how the ARM 53A will handle
//various kinds of interrupts.  You have to route things to the proper
//core with this peripheral or no interrupts will arrive at your core.
//
//https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2836/QA7_rev3.4.pdf
var QA7 *QA7Def = (*QA7Def)(unsafe.Pointer(uintptr(0x40000000 + 0x0)))

type QA7Def struct {
	Control               ControlDef                  // 0x0
	reserved000           volatile.Register32         // 0x4
	CoreTimerPrescaler    CoreTimerPrescalerDef       // 0x8
	GPUInterruptRouting   GPUInterruptRoutingDef      // 0xc
	reserved001           volatile.Register32         // 0x10
	reserved002           volatile.Register32         // 0x14
	reserved003           volatile.Register32         // 0x18
	Lower32               Lower32Def                  // 0x1c
	Upper32               Upper32Def                  // 0x20
	LocalInterrupt        LocalInterruptDef           // 0x24
	reserved004           volatile.Register32         // 0x28
	reserved005           volatile.Register32         // 0x2c
	reserved006           volatile.Register32         // 0x30
	LocalTimerControl     LocalTimerControlDef        // 0x34
	LocalTimerClearReload LocalTimerClearReloadDef    // 0x38
	reserved007           volatile.Register32         // 0x3c
	TimerInterruptControl [4]TimerInterruptControlDef // 0x40
	reserved008           volatile.Register32         // 0x50
	reserved009           volatile.Register32         // 0x54
	reserved010           volatile.Register32         // 0x58
	reserved011           volatile.Register32         // 0x5c
	IRQSource             [4]IRQSourceDef             // 0x60
	FIQSource             [4]FIQSourceDef             // 0x70
	reserved012           volatile.Register32         // 0x80
	reserved013           volatile.Register32         // 0x84
	reserved014           volatile.Register32         // 0x88
	reserved015           volatile.Register32         // 0x8c
	reserved016           volatile.Register32         // 0x90
	reserved017           volatile.Register32         // 0x94
	reserved018           volatile.Register32         // 0x98
	reserved019           volatile.Register32         // 0x9c
	reserved020           volatile.Register32         // 0xa0
	reserved021           volatile.Register32         // 0xa4
	reserved022           volatile.Register32         // 0xa8
	reserved023           volatile.Register32         // 0xac
	reserved024           volatile.Register32         // 0xb0
	reserved025           volatile.Register32         // 0xb4
	reserved026           volatile.Register32         // 0xb8
	reserved027           volatile.Register32         // 0xbc
	reserved028           volatile.Register32         // 0xc0
	reserved029           volatile.Register32         // 0xc4
	reserved030           volatile.Register32         // 0xc8
	reserved031           volatile.Register32         // 0xcc
	reserved032           volatile.Register32         // 0xd0
	reserved033           volatile.Register32         // 0xd4
	reserved034           volatile.Register32         // 0xd8
	reserved035           volatile.Register32         // 0xdc
	reserved036           volatile.Register32         // 0xe0
	reserved037           volatile.Register32         // 0xe4
	reserved038           volatile.Register32         // 0xe8
	reserved039           volatile.Register32         // 0xec
	reserved040           volatile.Register32         // 0xf0
	reserved041           volatile.Register32         // 0xf4
	reserved042           volatile.Register32         // 0xf8
	reserved043           volatile.Register32         // 0xfc
	reserved044           volatile.Register32         // 0x100
}

///////////////////////////////////////////////////////////////////////
//
//A free running 64 bit timer and 2 (neé 4) match registers.  However, the QEMU
//implementation does not have the 2 match registers.
//
//The exact behavior of this "clock" is hard to understand in QEMU.
//
//This is sometimes called the Chapter 12 timer, referring the BCM2835
//ARM peripherals manual and to disambiguate from the Chapter 14 timer
//and the ARM local timer.
var SystemTimer *SystemTimerDef = (*SystemTimerDef)(unsafe.Pointer(uintptr(0x3f000000 + 0x3000)))

type SystemTimerDef struct {
	reserved000        volatile.Register32   // 0x0
	SystemTimerLower32 SystemTimerLower32Def // 0x4
	SystemTimerUpper32 SystemTimerUpper32Def // 0x8
	reserved001        volatile.Register32   // 0xc
	reserved002        volatile.Register32   // 0x10
	reserved003        volatile.Register32   // 0x14
	reserved004        volatile.Register32   // 0x18
	reserved005        volatile.Register32   // 0x1c
}

///////////////////////////////////////////////////////////////////////
type AuxMUScratchDef volatile.Register32
type EnableDef volatile.Register32
type IRQDef volatile.Register32

func (a *IRQDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}

type MUBaudDef volatile.Register32
type MUCNTLDef volatile.Register32
type MUDataDef volatile.Register32
type MUIERDef volatile.Register32
type MUIIRDef volatile.Register32
type MULCRDef volatile.Register32
type MULSRDef volatile.Register32
type MUMCRDef volatile.Register32
type MUMSRDef volatile.Register32
type MUStatDef volatile.Register32
type ConfigDef volatile.Register32

func (a *ConfigDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *ConfigDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *ConfigDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type PollDef volatile.Register32

func (a *PollDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}

type ReceiveDef volatile.Register32

func (a *ReceiveDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}

type SenderDef volatile.Register32

func (a *SenderDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}

type StatusDef volatile.Register32

func (a *StatusDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}

type WriteDef volatile.Register32

func (a *WriteDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *WriteDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type BasicPendingDef volatile.Register32

func (a *BasicPendingDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}

type Disable1Def volatile.Register32

func (a *Disable1Def) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *Disable1Def) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type Disable2Def volatile.Register32

func (a *Disable2Def) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *Disable2Def) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type DisableBasicDef volatile.Register32

func (a *DisableBasicDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *DisableBasicDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type Enable1Def volatile.Register32

func (a *Enable1Def) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *Enable1Def) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type Enable2Def volatile.Register32

func (a *Enable2Def) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *Enable2Def) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type EnableBasicDef volatile.Register32

func (a *EnableBasicDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *EnableBasicDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type ICFIQSourceDef volatile.Register32
type Pending1Def volatile.Register32

func (a *Pending1Def) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}

type Pending2Def volatile.Register32

func (a *Pending2Def) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}

type ControlDef volatile.Register32
type CoreTimerPrescalerDef volatile.Register32
type FIQSourceDef volatile.Register32

func (a *FIQSourceDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *FIQSourceDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *FIQSourceDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type GPUInterruptRoutingDef volatile.Register32

func (a *GPUInterruptRoutingDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *GPUInterruptRoutingDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *GPUInterruptRoutingDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type IRQSourceDef volatile.Register32

func (a *IRQSourceDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *IRQSourceDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *IRQSourceDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type LocalInterruptDef volatile.Register32

func (a *LocalInterruptDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *LocalInterruptDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *LocalInterruptDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type LocalTimerClearReloadDef volatile.Register32
type LocalTimerControlDef volatile.Register32

func (a *LocalTimerControlDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *LocalTimerControlDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *LocalTimerControlDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type Lower32Def volatile.Register32

func (a *Lower32Def) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *Lower32Def) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *Lower32Def) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type TimerInterruptControlDef volatile.Register32

func (a *TimerInterruptControlDef) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *TimerInterruptControlDef) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *TimerInterruptControlDef) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type Upper32Def volatile.Register32

func (a *Upper32Def) Get() uint32 {
	return (*volatile.Register32)(a).Get()
}
func (a *Upper32Def) Set(u uint32) {
	(*volatile.Register32)(a).Set(u)
}
func (a *Upper32Def) SetBits(u uint32) {
	(*volatile.Register32)(a).SetBits(u)
}

type SystemTimerLower32Def volatile.Register32
type SystemTimerUpper32Def volatile.Register32

func (a *MUCNTLDef) CTSAssertLevelIsSet() bool {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUCNTLDef) SetCTSAssertLevel() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUCNTLDef) ClearCTSAssertLevel() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUCNTLDef) RTSAssertLevelIsSet() bool {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUCNTLDef) SetRTSAssertLevel() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUCNTLDef) ClearRTSAssertLevel() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUCNTLDef) RTSAutoFlowLevel() uint32 {
	b := volatile.BitField{Msb: 5, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *MUCNTLDef) SetRTSAutoFlowLevel(v uint32) {
	b := volatile.BitField{Msb: 5, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *MUCNTLDef) DeassertRTSWith1Empty() bool {
	return (*volatile.Register32)(a).Get() == 2
}
func (a *MUCNTLDef) SetDeassertRTSWith1Empty() {
	(*volatile.Register32)(a).SetBits(2 << 4)
}
func (a *MUCNTLDef) DeassertRTSWith2Empty() bool {
	return (*volatile.Register32)(a).Get() == 1
}
func (a *MUCNTLDef) SetDeassertRTSWith2Empty() {
	(*volatile.Register32)(a).SetBits(1 << 4)
}
func (a *MUCNTLDef) DeassertRTSWith3Empty() bool {
	return (*volatile.Register32)(a).Get() == 0
}
func (a *MUCNTLDef) SetDeassertRTSWith3Empty() {
	(*volatile.Register32)(a).SetBits(0 << 4)
}
func (a *MUCNTLDef) DeassertRTSWith4Empty() bool {
	return (*volatile.Register32)(a).Get() == 3
}
func (a *MUCNTLDef) SetDeassertRTSWith4Empty() {
	(*volatile.Register32)(a).SetBits(3 << 4)
}
func (a *MUCNTLDef) EnableTransmitAutoFlowControlUsingCTSIsSet() bool {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUCNTLDef) SetEnableTransmitAutoFlowControlUsingCTS() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUCNTLDef) ClearEnableTransmitAutoFlowControlUsingCTS() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUCNTLDef) EnableReceiveAutoFlowControlUsingRTSIsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUCNTLDef) SetEnableReceiveAutoFlowControlUsingRTS() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUCNTLDef) ClearEnableReceiveAutoFlowControlUsingRTS() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUCNTLDef) TransmitterEnableIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUCNTLDef) SetTransmitterEnable() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUCNTLDef) ClearTransmitterEnable() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUCNTLDef) ReceiverEnableIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUCNTLDef) SetReceiverEnable() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUCNTLDef) ClearReceiverEnable() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUStatDef) TransmitterDoneIsSet() bool {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) CTSLineIsSet() bool {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) TransmitFIFOFullIsSet() bool {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) ReceiverOverrunIsSet() bool {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) ReceiverIdleIsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) SpaceAvailableIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) TransmitFIFOFillLevel() uint32 {
	b := volatile.BitField{Msb: 27, Lsb: 24, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *MUStatDef) TransmitFIFOEmptyIsSet() bool {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) RTSLineIsSet() bool {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) TransmitterIdleIsSet() bool {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) SymbolAvailableIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUStatDef) ReceiveFIFOFillLevel() uint32 {
	b := volatile.BitField{Msb: 19, Lsb: 16, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *IRQDef) SPI2IsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQDef) SPI1IsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQDef) MiniUARTIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MULSRDef) DataReadyIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MULSRDef) TransmitterIdleIsSet() bool {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MULSRDef) TransmitterEmptyIsSet() bool {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MULSRDef) ReceiverOverrunIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *AuxMUScratchDef) CTS() uint32 {
	b := volatile.BitField{Msb: 7, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *AuxMUScratchDef) SetCTS(v uint32) {
	b := volatile.BitField{Msb: 7, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *MUIIRDef) FIFOEnabled() uint32 {
	b := volatile.BitField{Msb: 7, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *MUIIRDef) InterruptID() uint32 {
	b := volatile.BitField{Msb: 2, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *MUIIRDef) SetClearFIFO(v uint32) {
	b := volatile.BitField{Msb: 2, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *MUIIRDef) SetZeroReceive() {
	(*volatile.Register32)(a).SetBits(1 << 1)
}
func (a *MUIIRDef) SetZeroTransmit() {
	(*volatile.Register32)(a).SetBits(2 << 1)
}
func (a *MUIIRDef) SetZeroTransmitAndReceive() {
	(*volatile.Register32)(a).SetBits(3 << 1)
}
func (a *MUIIRDef) InterruptPendingIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MULCRDef) BreakIsSet() bool {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MULCRDef) SetBreak() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MULCRDef) ClearBreak() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MULCRDef) DataSize() uint32 {
	b := volatile.BitField{Msb: 1, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *MULCRDef) SetDataSize(v uint32) {
	b := volatile.BitField{Msb: 1, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *MULCRDef) EightBit() bool {
	return (*volatile.Register32)(a).Get() == 0
}
func (a *MULCRDef) SetEightBit() {
	(*volatile.Register32)(a).SetBits(0 << 0)
}
func (a *MULCRDef) SevenBit() bool {
	return (*volatile.Register32)(a).Get() == 0
}
func (a *MULCRDef) SetSevenBit() {
	(*volatile.Register32)(a).SetBits(0 << 0)
}
func (a *MUMCRDef) RTSIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUMCRDef) SetRTS() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUMCRDef) ClearRTS() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUMSRDef) CTSIsSet() bool {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUBaudDef) Baudrate() uint32 {
	b := volatile.BitField{Msb: 15, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *MUBaudDef) SetBaudrate(v uint32) {
	b := volatile.BitField{Msb: 15, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *EnableDef) MiniUARTIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *EnableDef) SetMiniUART() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableDef) ClearMiniUART() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableDef) SPI2IsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *EnableDef) SetSPI2() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableDef) ClearSPI2() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableDef) SPI1IsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *EnableDef) SetSPI1() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableDef) ClearSPI1() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUDataDef) Receive() uint32 {
	b := volatile.BitField{Msb: 7, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *MUDataDef) SetTransmit(v uint32) {
	b := volatile.BitField{Msb: 7, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *MUIERDef) WriteErrIsSet() bool {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUIERDef) SetWriteErr() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUIERDef) ClearWriteErr() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUIERDef) ReadErrIsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUIERDef) SetReadErr() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUIERDef) ClearReadErr() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUIERDef) TransmitIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUIERDef) SetTransmit() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUIERDef) ClearTransmit() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *MUIERDef) ReceiveIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *MUIERDef) SetReceive() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *MUIERDef) ClearReceive() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *LocalTimerControlDef) ReloadValue() uint32 {
	b := volatile.BitField{Msb: 27, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *LocalTimerControlDef) SetReloadValue(v uint32) {
	b := volatile.BitField{Msb: 27, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *LocalTimerControlDef) InterruptPendingIsSet() bool {
	b := volatile.BitField{Msb: 31, Lsb: 31, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *LocalTimerControlDef) InterruptEnableIsSet() bool {
	b := volatile.BitField{Msb: 29, Lsb: 29, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *LocalTimerControlDef) SetInterruptEnable() {
	b := volatile.BitField{Msb: 29, Lsb: 29, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *LocalTimerControlDef) ClearInterruptEnable() {
	b := volatile.BitField{Msb: 29, Lsb: 29, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *LocalTimerControlDef) TimerEnableIsSet() bool {
	b := volatile.BitField{Msb: 28, Lsb: 28, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *LocalTimerControlDef) SetTimerEnable() {
	b := volatile.BitField{Msb: 28, Lsb: 28, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *LocalTimerControlDef) ClearTimerEnable() {
	b := volatile.BitField{Msb: 28, Lsb: 28, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *TimerInterruptControlDef) VirtualTimerIRQIsSet() bool {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *TimerInterruptControlDef) SetVirtualTimerIRQ() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *TimerInterruptControlDef) ClearVirtualTimerIRQ() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *TimerInterruptControlDef) HypervisorTimerIRQIsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *TimerInterruptControlDef) SetHypervisorTimerIRQ() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *TimerInterruptControlDef) ClearHypervisorTimerIRQ() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *TimerInterruptControlDef) PhysicalNonSecureTimerIRQIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *TimerInterruptControlDef) SetPhysicalNonSecureTimerIRQ() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *TimerInterruptControlDef) ClearPhysicalNonSecureTimerIRQ() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *TimerInterruptControlDef) PhysicalSecureTimerIRQIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *TimerInterruptControlDef) SetPhysicalSecureTimerIRQ() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *TimerInterruptControlDef) ClearPhysicalSecureTimerIRQ() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *TimerInterruptControlDef) VirtualTimerFIQIsSet() bool {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *TimerInterruptControlDef) SetVirtualTimerFIQ() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *TimerInterruptControlDef) ClearVirtualTimerFIQ() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *TimerInterruptControlDef) HypervisorTimerFIQIsSet() bool {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *TimerInterruptControlDef) SetHypervisorTimerFIQ() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *TimerInterruptControlDef) ClearHypervisorTimerFIQ() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *TimerInterruptControlDef) PhysicalNonSecureTimerFIQIsSet() bool {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *TimerInterruptControlDef) SetPhysicalNonSecureTimerFIQ() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *TimerInterruptControlDef) ClearPhysicalNonSecureTimerFIQ() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *TimerInterruptControlDef) PhysicalSecureTimerFIQIsSet() bool {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *TimerInterruptControlDef) SetPhysicalSecureTimerFIQ() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *TimerInterruptControlDef) ClearPhysicalSecureTimerFIQ() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) GPUIsSet() bool {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetGPU() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearGPU() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) Mailbox0IsSet() bool {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetMailbox0() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearMailbox0() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) HypervisorTimerIsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetHypervisorTimer() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearHypervisorTimer() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) PhysicalNonSecureTimerIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetPhysicalNonSecureTimer() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearPhysicalNonSecureTimer() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) LocalTimerIsSet() bool {
	b := volatile.BitField{Msb: 11, Lsb: 11, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetLocalTimer() {
	b := volatile.BitField{Msb: 11, Lsb: 11, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearLocalTimer() {
	b := volatile.BitField{Msb: 11, Lsb: 11, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) Mailbox2IsSet() bool {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetMailbox2() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearMailbox2() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) Mailbox1IsSet() bool {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetMailbox1() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearMailbox1() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) VirtualTimerIsSet() bool {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetVirtualTimer() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearVirtualTimer() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) PhysicalSecureTimerIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetPhysicalSecureTimer() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearPhysicalSecureTimer() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *FIQSourceDef) Mailbox3IsSet() bool {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *FIQSourceDef) SetMailbox3() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *FIQSourceDef) ClearMailbox3() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *ControlDef) ClockSourceAPBClockIsSet() bool {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *ControlDef) SetClockSourceAPBClock() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *ControlDef) ClearClockSourceAPBClock() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *ControlDef) IncrementBy2IsSet() bool {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *ControlDef) SetIncrementBy2() {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *ControlDef) ClearIncrementBy2() {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *GPUInterruptRoutingDef) GPUIRQRouting() uint32 {
	b := volatile.BitField{Msb: 2, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *GPUInterruptRoutingDef) SetGPUIRQRouting(v uint32) {
	b := volatile.BitField{Msb: 2, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *GPUInterruptRoutingDef) IRQToCore0() bool {
	return (*volatile.Register32)(a).Get() == 0
}
func (a *GPUInterruptRoutingDef) SetIRQToCore0() {
	(*volatile.Register32)(a).SetBits(0 << 1)
}
func (a *GPUInterruptRoutingDef) IRQToCore1() bool {
	return (*volatile.Register32)(a).Get() == 1
}
func (a *GPUInterruptRoutingDef) SetIRQToCore1() {
	(*volatile.Register32)(a).SetBits(1 << 1)
}
func (a *GPUInterruptRoutingDef) IRQToCore2() bool {
	return (*volatile.Register32)(a).Get() == 2
}
func (a *GPUInterruptRoutingDef) SetIRQToCore2() {
	(*volatile.Register32)(a).SetBits(2 << 1)
}
func (a *GPUInterruptRoutingDef) IRQToCore3() bool {
	return (*volatile.Register32)(a).Get() == 3
}
func (a *GPUInterruptRoutingDef) SetIRQToCore3() {
	(*volatile.Register32)(a).SetBits(3 << 1)
}
func (a *GPUInterruptRoutingDef) GPUFIQRouting() uint32 {
	b := volatile.BitField{Msb: 3, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *GPUInterruptRoutingDef) SetGPUFIQRouting(v uint32) {
	b := volatile.BitField{Msb: 3, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *GPUInterruptRoutingDef) FIQToCore0() bool {
	return (*volatile.Register32)(a).Get() == 0
}
func (a *GPUInterruptRoutingDef) SetFIQToCore0() {
	(*volatile.Register32)(a).SetBits(0 << 2)
}
func (a *GPUInterruptRoutingDef) FIQToCore1() bool {
	return (*volatile.Register32)(a).Get() == 1
}
func (a *GPUInterruptRoutingDef) SetFIQToCore1() {
	(*volatile.Register32)(a).SetBits(1 << 2)
}
func (a *GPUInterruptRoutingDef) FIQToCore2() bool {
	return (*volatile.Register32)(a).Get() == 2
}
func (a *GPUInterruptRoutingDef) SetFIQToCore2() {
	(*volatile.Register32)(a).SetBits(2 << 2)
}
func (a *GPUInterruptRoutingDef) FIQToCore3() bool {
	return (*volatile.Register32)(a).Get() == 3
}
func (a *GPUInterruptRoutingDef) SetFIQToCore3() {
	(*volatile.Register32)(a).SetBits(3 << 2)
}
func (a *LocalTimerClearReloadDef) SetClear() {
	b := volatile.BitField{Msb: 31, Lsb: 31, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *LocalTimerClearReloadDef) ClearClear() {
	b := volatile.BitField{Msb: 31, Lsb: 31, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *LocalTimerClearReloadDef) SetReload() {
	b := volatile.BitField{Msb: 30, Lsb: 30, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *LocalTimerClearReloadDef) ClearReload() {
	b := volatile.BitField{Msb: 30, Lsb: 30, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) Mailbox3IsSet() bool {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetMailbox3() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearMailbox3() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) Mailbox2IsSet() bool {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetMailbox2() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearMailbox2() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) HypervisorTimerIsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetHypervisorTimer() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearHypervisorTimer() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) PhysicalSecureTimerIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetPhysicalSecureTimer() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearPhysicalSecureTimer() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) LocalTimerIsSet() bool {
	b := volatile.BitField{Msb: 11, Lsb: 11, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetLocalTimer() {
	b := volatile.BitField{Msb: 11, Lsb: 11, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearLocalTimer() {
	b := volatile.BitField{Msb: 11, Lsb: 11, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) GPUIsSet() bool {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetGPU() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearGPU() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) Mailbox1IsSet() bool {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetMailbox1() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearMailbox1() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) Mailbox0IsSet() bool {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetMailbox0() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearMailbox0() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) VirtualTimerIsSet() bool {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetVirtualTimer() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearVirtualTimer() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *IRQSourceDef) PhysicalNonSecureTimerIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *IRQSourceDef) SetPhysicalNonSecureTimer() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *IRQSourceDef) ClearPhysicalNonSecureTimer() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *LocalInterruptDef) LocalTimerRoute() uint32 {
	b := volatile.BitField{Msb: 2, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *LocalInterruptDef) SetLocalTimerRoute(v uint32) {
	b := volatile.BitField{Msb: 2, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *LocalInterruptDef) Core0FIQ() bool {
	return (*volatile.Register32)(a).Get() == 4
}
func (a *LocalInterruptDef) SetCore0FIQ() {
	(*volatile.Register32)(a).SetBits(4 << 0)
}
func (a *LocalInterruptDef) Core0IRQ() bool {
	return (*volatile.Register32)(a).Get() == 0
}
func (a *LocalInterruptDef) SetCore0IRQ() {
	(*volatile.Register32)(a).SetBits(0 << 0)
}
func (a *LocalInterruptDef) Core1FIQ() bool {
	return (*volatile.Register32)(a).Get() == 5
}
func (a *LocalInterruptDef) SetCore1FIQ() {
	(*volatile.Register32)(a).SetBits(5 << 0)
}
func (a *LocalInterruptDef) Core1IRQ() bool {
	return (*volatile.Register32)(a).Get() == 1
}
func (a *LocalInterruptDef) SetCore1IRQ() {
	(*volatile.Register32)(a).SetBits(1 << 0)
}
func (a *LocalInterruptDef) Core2FIQ() bool {
	return (*volatile.Register32)(a).Get() == 6
}
func (a *LocalInterruptDef) SetCore2FIQ() {
	(*volatile.Register32)(a).SetBits(6 << 0)
}
func (a *LocalInterruptDef) Core2IRQ() bool {
	return (*volatile.Register32)(a).Get() == 2
}
func (a *LocalInterruptDef) SetCore2IRQ() {
	(*volatile.Register32)(a).SetBits(2 << 0)
}
func (a *LocalInterruptDef) Core3FIQ() bool {
	return (*volatile.Register32)(a).Get() == 7
}
func (a *LocalInterruptDef) SetCore3FIQ() {
	(*volatile.Register32)(a).SetBits(7 << 0)
}
func (a *LocalInterruptDef) Core3IRQ() bool {
	return (*volatile.Register32)(a).Get() == 3
}
func (a *LocalInterruptDef) SetCore3IRQ() {
	(*volatile.Register32)(a).SetBits(3 << 0)
}
func (a *StatusDef) EmptyIsSet() bool {
	b := volatile.BitField{Msb: 30, Lsb: 30, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *StatusDef) FullIsSet() bool {
	b := volatile.BitField{Msb: 31, Lsb: 31, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *ICFIQSourceDef) FIQEnableIsSet() bool {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *ICFIQSourceDef) SetFIQEnable() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *ICFIQSourceDef) ClearFIQEnable() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *ICFIQSourceDef) FIQSource() uint32 {
	b := volatile.BitField{Msb: 6, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.Get()
}
func (a *ICFIQSourceDef) SetFIQSource(v uint32) {
	b := volatile.BitField{Msb: 6, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.SetBits(v)
}
func (a *ICFIQSourceDef) ARMDoorbell0() bool {
	return (*volatile.Register32)(a).Get() == 66
}
func (a *ICFIQSourceDef) SetARMDoorbell0() {
	(*volatile.Register32)(a).SetBits(66 << 0)
}
func (a *ICFIQSourceDef) ARMDoorbell1() bool {
	return (*volatile.Register32)(a).Get() == 67
}
func (a *ICFIQSourceDef) SetARMDoorbell1() {
	(*volatile.Register32)(a).SetBits(67 << 0)
}
func (a *ICFIQSourceDef) ARMMailbox() bool {
	return (*volatile.Register32)(a).Get() == 65
}
func (a *ICFIQSourceDef) SetARMMailbox() {
	(*volatile.Register32)(a).SetBits(65 << 0)
}
func (a *ICFIQSourceDef) ARMTimer() bool {
	return (*volatile.Register32)(a).Get() == 64
}
func (a *ICFIQSourceDef) SetARMTimer() {
	(*volatile.Register32)(a).SetBits(64 << 0)
}
func (a *ICFIQSourceDef) GPU0Halted() bool {
	return (*volatile.Register32)(a).Get() == 68
}
func (a *ICFIQSourceDef) SetGPU0Halted() {
	(*volatile.Register32)(a).SetBits(68 << 0)
}
func (a *ICFIQSourceDef) GPU1Halted() bool {
	return (*volatile.Register32)(a).Get() == 69
}
func (a *ICFIQSourceDef) SetGPU1Halted() {
	(*volatile.Register32)(a).SetBits(69 << 0)
}
func (a *ICFIQSourceDef) IllegalAccessType0() bool {
	return (*volatile.Register32)(a).Get() == 71
}
func (a *ICFIQSourceDef) SetIllegalAccessType0() {
	(*volatile.Register32)(a).SetBits(71 << 0)
}
func (a *ICFIQSourceDef) IllegalAccessType1() bool {
	return (*volatile.Register32)(a).Get() == 70
}
func (a *ICFIQSourceDef) SetIllegalAccessType1() {
	(*volatile.Register32)(a).SetBits(70 << 0)
}
func (a *Enable1Def) SetAux() {
	b := volatile.BitField{Msb: 29, Lsb: 29, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *Enable1Def) ClearAux() {
	b := volatile.BitField{Msb: 29, Lsb: 29, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *Disable1Def) SetAux() {
	b := volatile.BitField{Msb: 29, Lsb: 29, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *Disable1Def) ClearAux() {
	b := volatile.BitField{Msb: 29, Lsb: 29, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *BasicPendingDef) ARMDoorbell0IsSet() bool {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) ARMDoorbell1IsSet() bool {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) IllegalAccessType0IsSet() bool {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) MoreBitsSetInPending1IsSet() bool {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) ARMTimerIsSet() bool {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) ARMMailboxIsSet() bool {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) GPU0HaltedIsSet() bool {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) GPU1HaltedIsSet() bool {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) IllegalAccessType1IsSet() bool {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *BasicPendingDef) MoreBitsSetInPending2IsSet() bool {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending1Def) AuxIsSet() bool {
	b := volatile.BitField{Msb: 29, Lsb: 29, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending2Def) GPIO1IsSet() bool {
	b := volatile.BitField{Msb: 18, Lsb: 18, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending2Def) GPIO2IsSet() bool {
	b := volatile.BitField{Msb: 19, Lsb: 19, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending2Def) GPIO3IsSet() bool {
	b := volatile.BitField{Msb: 20, Lsb: 20, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending2Def) I2CIsSet() bool {
	b := volatile.BitField{Msb: 21, Lsb: 21, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending2Def) SPIIsSet() bool {
	b := volatile.BitField{Msb: 22, Lsb: 22, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending2Def) PCMIsSet() bool {
	b := volatile.BitField{Msb: 22, Lsb: 22, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending2Def) UARTIsSet() bool {
	b := volatile.BitField{Msb: 24, Lsb: 24, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Pending2Def) GPIO0IsSet() bool {
	b := volatile.BitField{Msb: 17, Lsb: 17, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *DisableBasicDef) SetARMDoorbell0() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearARMDoorbell0() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetGPU0Halted() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearGPU0Halted() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetMoreBitsSetInPending2() {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearMoreBitsSetInPending2() {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetIllegalAccessType0() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearIllegalAccessType0() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetMoreBitsSetInPending1() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearMoreBitsSetInPending1() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetARMTimer() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearARMTimer() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetARMMailbox() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearARMMailbox() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetARMDoorbell1() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearARMDoorbell1() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetGPU1Halted() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearGPU1Halted() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *DisableBasicDef) SetIllegalAccessType1() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *DisableBasicDef) ClearIllegalAccessType1() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *Enable2Def) GPIO3IsSet() bool {
	b := volatile.BitField{Msb: 20, Lsb: 20, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Enable2Def) I2CIsSet() bool {
	b := volatile.BitField{Msb: 21, Lsb: 21, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Enable2Def) SPIIsSet() bool {
	b := volatile.BitField{Msb: 22, Lsb: 22, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Enable2Def) PCMIsSet() bool {
	b := volatile.BitField{Msb: 22, Lsb: 22, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Enable2Def) UARTIsSet() bool {
	b := volatile.BitField{Msb: 24, Lsb: 24, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Enable2Def) GPIO0IsSet() bool {
	b := volatile.BitField{Msb: 17, Lsb: 17, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Enable2Def) GPIO1IsSet() bool {
	b := volatile.BitField{Msb: 18, Lsb: 18, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Enable2Def) GPIO2IsSet() bool {
	b := volatile.BitField{Msb: 19, Lsb: 19, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *EnableBasicDef) SetARMDoorbell1() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearARMDoorbell1() {
	b := volatile.BitField{Msb: 3, Lsb: 3, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetGPU1Halted() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearGPU1Halted() {
	b := volatile.BitField{Msb: 5, Lsb: 5, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetIllegalAccessType1() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearIllegalAccessType1() {
	b := volatile.BitField{Msb: 6, Lsb: 6, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetMoreBitsSetInPending1() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearMoreBitsSetInPending1() {
	b := volatile.BitField{Msb: 8, Lsb: 8, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetMoreBitsSetInPending2() {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearMoreBitsSetInPending2() {
	b := volatile.BitField{Msb: 9, Lsb: 9, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetARMMailbox() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearARMMailbox() {
	b := volatile.BitField{Msb: 1, Lsb: 1, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetARMDoorbell0() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearARMDoorbell0() {
	b := volatile.BitField{Msb: 2, Lsb: 2, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetIllegalAccessType0() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearIllegalAccessType0() {
	b := volatile.BitField{Msb: 7, Lsb: 7, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetARMTimer() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearARMTimer() {
	b := volatile.BitField{Msb: 0, Lsb: 0, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *EnableBasicDef) SetGPU0Halted() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Set()
}
func (a *EnableBasicDef) ClearGPU0Halted() {
	b := volatile.BitField{Msb: 4, Lsb: 4, Ptr: (*volatile.Register32)(a)}
	b.Clear()
}
func (a *Disable2Def) GPIO1IsSet() bool {
	b := volatile.BitField{Msb: 18, Lsb: 18, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Disable2Def) GPIO2IsSet() bool {
	b := volatile.BitField{Msb: 19, Lsb: 19, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Disable2Def) GPIO3IsSet() bool {
	b := volatile.BitField{Msb: 20, Lsb: 20, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Disable2Def) I2CIsSet() bool {
	b := volatile.BitField{Msb: 21, Lsb: 21, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Disable2Def) SPIIsSet() bool {
	b := volatile.BitField{Msb: 22, Lsb: 22, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Disable2Def) PCMIsSet() bool {
	b := volatile.BitField{Msb: 22, Lsb: 22, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Disable2Def) UARTIsSet() bool {
	b := volatile.BitField{Msb: 24, Lsb: 24, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
func (a *Disable2Def) GPIO0IsSet() bool {
	b := volatile.BitField{Msb: 17, Lsb: 17, Ptr: (*volatile.Register32)(a)}
	return b.HasBits()
}
